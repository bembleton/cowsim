import ppu from '../ppu';
const {
  attributes,
  setAttribute,
  getAttributeAdr,
  setNametableAdr,
  getNametableAdr,
  setMirroring,
  HORIZONTAL,
  VERTICAL
} = ppu;

const toBinary = (n) => {
  const b = n.toString(2);
  return "00000000".substr(b.length) + b;
};

const toAddress = (n) => {
  const adr = n.toString(16).toUpperCase();
  return `0x${'0000'.substr(adr.length) + adr}`;
};

describe('ppu', () => {
  beforeEach(() => {
    // clear attributes
    attributes.fill(0);
    setMirroring(HORIZONTAL);
  });

  /*
       2xx0    2xx1    2xx2    2xx3    2xx4    2xx5    2xx6    2xx7
     ,-------+-------+-------+-------+-------+-------+-------+-------.
  0  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x00:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
  1  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
  2  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x08:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
  3  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
  4  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x10:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
  5  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
  6  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x18:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
  7  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
  8  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x20:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
  9  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
 10  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x28:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 11  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
 12  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x30:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 13  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
|14  |38 .   |   .   |3a .   |   .   |3c .   |   .   |   .   |3f .   |
2x38:`-------+-------+-------+-------+-------+-------+-------+-------'
      16  17  18
     `-------+-------+-------+-------+-------+-------+-------+-------'
 0   |40 .   |   .   |   .   |   .   |   .   |   .   |   .   |47 .   |
2x40:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 16  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
 17  |48 .   |   .   |   .   |   .   |   .   |   .   |   .   |4f .   |
2x48:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 18  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
 19  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x50:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 20  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
 21  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x58:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 22  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
 23  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x60:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 24  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
 25  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x68:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 26  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
 27  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
2x70:| - + - | - + - | - + - | - + - | - + - | - + - | - + - | - + - |
 28  |   .   |   .   |   .   |   .   |   .   |   .   |   .   |   .   |
     +-------+-------+-------+-------+-------+-------+-------+-------+
|29  |78 .   |   .   |   .   |   .   |   .   |   .   |   .   |7f .   |
2x78:`-------+-------+-------+-------+-------+-------+-------+-------'

  */
  describe('getAttributeAdr', () => {
    describe('with horizontal mirroring', () => {
      it.each([
        // page 1, y: 0-14
        [0,0, 0x00],
        [1,0, 0x00],
        [2,0, 0x01],
        [15,0, 0x07],
        [1,1, 0x00],
        [0,2, 0x08],
        [0,14, 0x38],
        [1,14, 0x38],
        [2,14, 0x39],
        [15,14, 0x3f],
        // page 2, y: 15-29
        [0,15, 0x40],
        [2,15, 0x41],
        [0,29, 0x78],
        [15,29, 0x7f]
      ])(
        'should return the correct address for %i,%i',
        (x,y, expected) => {
        const actual = getAttributeAdr(x,y);
        expect(toAddress(actual)).toBe(toAddress(expected));
  
        const actualMirrored = getAttributeAdr(x + 16, y);
        expect(toAddress(actualMirrored)).toBe(toAddress(expected));
      });
    });
    
    describe('with vertical mirroring', () => {
      it.each([
        // page 1, x: 0-15
        [0,0, 0x00],
        [1,0, 0x00],
        [2,0, 0x01],
        [15,0, 0x07],
        [1,1, 0x00],
        [0,2, 0x08],
        [0,14, 0x38],
        [1,14, 0x38],
        [2,14, 0x39],
        [15,14, 0x3f],
        // page 2, x: 16-31
        [16,0, 0x40],
        [31,0, 0x47],
        [16,2, 0x48],
        [16,14, 0x78],
        [31,14, 0x7f],
      ])(
        'should return the correct address for %i,%i',
        (x,y, expected) => {
        setMirroring(VERTICAL);
        const actual = getAttributeAdr(x,y);
        expect(toAddress(actual)).toBe(toAddress(expected));

        const actualMirrored = getAttributeAdr(x, y + 15);
        expect(toAddress(actualMirrored)).toBe(toAddress(expected));
      })
    });
  });

  describe('setAttribute', () => {
    it.each([
      // byte 1
      [0,0,3, '00000011'],
      [1,0,3, '00001100'],
      [0,1,3, '00110000'],
      [1,1,3, '11000000'],
      // byte 2
      [2,0,3, '00000011'],
      [3,0,3, '00001100'],
      [2,1,3, '00110000'],
      [3,1,3, '11000000'],
      // row 14
      [0,14,3, '00000011'],
      [15,14,3, '00001100']
    ])('should set byte correctly for %i,%i', (x,y,palette, expected) => {
      const adr = getAttributeAdr(x, y);
      setAttribute(x, y, palette);
      
      // verify that only the expected byte was modified
      attributes.forEach((actual, idx) => {
        if (idx === adr) {
          expect(toBinary(actual)).toBe(expected);
        } else {
          expect(toBinary(actual)).toBe('00000000');
        }
      });
    });
  });

  // describe('getNametableAdr', () => {
  //   describe('with vertical mirroring', () => {
  //     it.each([
  //       [63, 6, ]
  //     ])('should return correct address for %i,%i',
  //     (x,y, expected) => {

  //     });
  //   })
  // })
});

/*
x = 0-16
y = 0-15

y % 2
*/